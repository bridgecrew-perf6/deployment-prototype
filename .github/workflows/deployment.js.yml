name: Node.js CI

on:
  pull_request:
    branches:
      - '*'

env:
  PR_NUMBER: ${{ github.event.number }}
  BRANCH_NAME: ''
  APP_ID: ''

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.22.6
      uses: actions/setup-node@v2
      with:
        node-version: 12.22.6
        cache: 'npm'
    - name: Install NPM packages
      run: npm ci
    - name: Run lint
      run: npm run lint
    - name: Run build
      run: npm run build --if-present

  test:
    needs:
      - build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.22.6
      uses: actions/setup-node@v2
      with:
        node-version: 12.22.6
        cache: 'npm'
    - name: Install NPM packages
      run: npm ci
    - name: Run tests
      run: npm run test

  deploy:
    needs:
      - test

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Login to the Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "deployment-prototype-3"
          heroku_email: "robert.durcansky@grow2fit.com"
          justlogin: true
      - run: heroku auth:whoami

      - name: Get pull request branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.1
      - name: Set branch name
        run: echo "BRANCH_NAME=${{ steps.branch-name.outputs.current_branch }}" >> $GITHUB_ENV
      - name: Show branch name
        run: "echo 'Branch name: ${{ env.BRANCH_NAME }}'"

      - name: Create Review App in Heroku
        run: |
          curl -n -X POST https://api.heroku.com/review-apps \
            -d '{
            "branch": "review-${{ env.BRANCH_NAME }}",
            "pr_number": ${{ env.PR_NUMBER }},
            "pipeline": "ecfa1927-1430-420e-b492-faa4d3cb0b4f",
            "source_blob": {
              "url": "https://github.com/RobertG2F/deployment-prototype/tarball/feature/minimal-build",
              "version": "v1.0.0"
            }
            }' \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -o create-review-app-response.json
      - name: Parse review app ID from the response
        uses: sergeysova/jq-action@v2
        id: newReviewAppId
        with:
          cmd: 'jq .id create-review-app-response.json -r'

      - name: Set new review app id
        if: steps.newReviewAppId.outputs.value != 'conflict'
        run: echo "APP_ID=${{ steps.newReviewAppId.outputs.value }}" >> $GITHUB_ENV
      - name: Show APP_ID
        run: "echo 'Pull Request Number: ${{ env.APP_ID }}'"

      - name: Get existing review apps
        if: steps.newReviewAppId.outputs.value == 'conflict'
        run: |
          curl -n https://api.heroku.com/pipelines/ecfa1927-1430-420e-b492-faa4d3cb0b4f/review-apps \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -o review-apps-list-response.json
      - name: Find review app for the pull request
        if: steps.newReviewAppId.outputs.value == 'conflict'
        uses: sergeysova/jq-action@v2
        id: existingReviewAppId
        with:
          cmd: 'jq ".[] | select(.branch== \"review-feature/update-workflow\") | .app.id" review-apps-list-response.json -r'
      - name: Set existing review app id
        if: steps.newReviewAppId.outputs.value == 'conflict'
        run: echo "APP_ID=${{ steps.existingReviewAppId.outputs.value }}" >> $GITHUB_ENV
      - name: Show APP ID
        run: "echo 'App ID: ${{ env.APP_ID }}'"

      - name: Use Node.js 12.22.6
        uses: actions/setup-node@v2
        with:
          node-version: 12.22.6
          cache: 'npm'

      - name: Install NPM packages
        run: npm ci

      - name: Build the project
        run: npm run build

      - name: LS command
        run: ls -l

      - name: Create app directory in dist folter
        run: mkdir dist/app

      - name: LS dist folder
        run: ls -l dist

      - name: Copy everything to app directory
        run: cp -a dist/deployment-prototype/. dist/app

      - name: LS dist/app folder
        run: ls -l dist/app

      - name: Copy server file to apps project
        run: cp web2.js dist/app

      - name: Download, extract and prepare Nodejs runner
        run: |
          curl -L -O http://nodejs.org/dist/v12.22.6/node-v12.22.6-linux-x64.tar.gz
          tar -xf node-v12.22.6-linux-x64.tar.gz --directory dist/app
          echo "PWD 1"
          pwd
          cd dist/app/node-v12.22.6-linux-x64/lib/node_modules/npm
          echo "PWD 2"
          pwd
          cd ..
          cd ..
          cd ..
          cd ..
          cd ..
          cd ..
          echo "PWD 3"
          pwd
          cp package-server.json dist/app/package.json
          cd dist/app
          npm install
          cd ..
          cd ..
      - name: LS apps directory
        run: ls -l dist/app
      - name: Show package json
        run: cat dist/app/node-v12.22.6-linux-x64/lib/node_modules/npm/package.json

      - name: Create a Slug archive
        run: |
          ls -l
          cd dist
          ls -l
          tar czfv slug.tgz ./app
          ls -l
          cd ..
          ls -l

      - name: Allocate new slug for the app
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            -H 'Accept: application/vnd.heroku+json; version=3' \
            -d '{"process_types":{"web":"node-v12.22.6-linux-x64/bin/node web2.js"}}' \
            -n https://api.heroku.com/apps/${{ env.APP_ID }}/slugs \
            -o allocateSlug-response.json
          cat allocateSlug-response.json
      - name: Parse Blob URL from the response
        uses: sergeysova/jq-action@v2
        id: blobUrl
        with:
          cmd: 'jq .blob.url allocateSlug-response.json -r'
      - name: Parse Slug IDL from the response
        uses: sergeysova/jq-action@v2
        id: slugId
        with:
          cmd: 'jq .id allocateSlug-response.json -r'

      - name: upload the Slug
        run: |
          cd dist
          curl -X PUT -H "Content-Type:" \
          --data-binary @slug.tgz "${{ steps.blobUrl.outputs.value }}"
          cd ..

      - name: Release the Slug
        run: |
          curl -X POST -H "Accept: application/vnd.heroku+json; version=3" \
            -H "Content-Type: application/json" \
            -d '{"slug":"${{ steps.slugId.outputs.value }}"}' \
            -n https://api.heroku.com/apps/${{ env.APP_ID }}/releases

      # TODO Deprecated Code creating Heroku App and adding it to the Heroku Pipeline
#      - name: Create new app if not exists
#        if: steps.appId.outputs.value == 'not_found'
#        run: |
#          curl -n -X POST https://api.heroku.com/apps \
#            -d '{"name": "deployment-prototype-${{ env.PR_NUMBER }}", "region": "ed30241c-ed8c-4bb6-9714-61953675d0b4", "stack": "heroku-20"}' \
#            -H "Content-Type: application/json" \
#            -H "Accept: application/vnd.heroku+json; version=3" \
#            -o createApp-response.json
#      - name: CAT createApp-response.json file
#        if: steps.appId.outputs.value == 'not_found'
#        run: cat createApp-response.json
#      - name: Parse new app id
#        if: steps.appId.outputs.value == 'not_found'
#        uses: sergeysova/jq-action@v2
#        id: newAppId
#        with:
#          cmd: 'jq .id createApp-response.json -r'
#      - name: Set new app id to env variable
#        if: steps.appId.outputs.value == 'not_found'
#        run: |
#          echo "new app created"
#          echo "APP_ID=${{ steps.newAppId.outputs.value }}" >> $GITHUB_ENV
#      - name: Output APP ID
#        if: steps.appId.outputs.value == 'not_found'
#        run: "echo 'App ID: ${{ env.APP_ID }}'"
#      - name: Add new app into pipeline
#        if: steps.appId.outputs.value == 'not_found'
#        run: |
#          curl -n -X POST https://api.heroku.com/pipeline-couplings \
#            -d '{"app": "${{ env.APP_ID }}", "pipeline": "ecfa1927-1430-420e-b492-faa4d3cb0b4f", "stage": "development"}' \
#            -H "Content-Type: application/json" \
#            -H "Accept: application/vnd.heroku+json; version=3"
